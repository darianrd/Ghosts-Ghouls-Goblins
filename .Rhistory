library(tidymodels)
library(vroom)
GGGtrain <- vroom("train.csv")
GGGtest <- vroom("test.csv")
NAtrain <- vroom("GGGtrainNA.csv")
View(GGGtrain)
View(NAtrain)
View(GGGtrain)
GGGrecipe <- recipe(type ~ .) |>
step_impute_knn(neighbors = 5,
impute_with = imp_vars(all_predictors()))
GGGrecipe <- recipe(type ~ ., data = GGGtrain) |>
step_impute_knn(neighbors = 5,
impute_with = imp_vars(all_predictors()))
library(tidymodels)
library(vroom)
GGGtrain <- vroom("train.csv")
GGGtest <- vroom("test.csv")
NAtrain <- vroom("GGGtrainNA.csv")
GGGrecipe <- recipe(type ~ ., data = GGGtrain) |>
step_impute_knn(neighbors = 5,
impute_with = imp_vars(all_predictors()))
GGGrecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(neighbors = 5,
impute_with = imp_vars(all_predictors()))
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(neighbors = 5,
impute_with = imp_vars(all_predictors()))
prep(NArecipe)
bake(NArecipe)
NA_prep <- prep(NArecipe)
library(tidymodels)
library(vroom)
GGGtrain <- vroom("train.csv")
GGGtest <- vroom("test.csv")
NAtrain <- vroom("GGGtrainNA.csv")
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(neighbors = 5,
impute_with = imp_vars(all_predictors()))
NA_prep <- prep(NArecipe)
bake(NA_prep, new_data = NAtrain)
View(NAtrain)
View(NAtrain)
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_mean() |>
step_impute_mode()
NA_prep <- prep(NArecipe)
bake(NA_prep, new_data = NAtrain)
library(tidymodels)
library(vroom)
GGGtrain <- vroom("train.csv")
GGGtest <- vroom("test.csv")
NAtrain <- vroom("GGGtrainNA.csv")
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(neighbors = 5,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
bake(NA_prep, new_data = NAtrain)
View(NAtrain)
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(neighbors = 5,
impute_with = imp_vars("bone_length",
"rotting_flesh",
"hair_length"))
NA_prep <- prep(NArecipe)
bake(NA_prep, new_data = NAtrain)
View(NA_prep)
print(names(NAtrain))
NA_bake <- bake(NA_prep, new_data = NAtrain)
summary(NA_bake)
View(NA_bake)
library(recipes)
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(neighbors = 5,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
NA_bake <- bake(NA_prep, new_data = NAtrain)
View(NA_bake)
bake(NA_prep, new_data = NAtrain)
tidymodels_update()
library(tidymodels)
library(vroom)
GGGtrain <- vroom("train.csv")
GGGtest <- vroom("test.csv")
NAtrain <- vroom("GGGtrainNA.csv")
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(neighbors = 5,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
bake(NA_prep, new_data = NAtrain)
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(imp_vars(bone_length,
rotting_flesh,
hair_length),
neighbors = 5,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
bake(NA_prep, new_data = NAtrain)
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(imp_vars(all_predictors()),
neighbors = 5,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(neighbors = 5,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
bake(NA_prep, new_data = NAtrain)
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_mean(all_numeric_predictors()) |>
step_impute_mode(all_nominal_predictors())
NA_prep <- prep(NArecipe)
bake(NA_prep, new_data = NAtrain)
hair_length)
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(all_predictors(),
neighbors = 5,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
bake(NA_prep, new_data = NAtrain)
library(tidymodels)
library(vroom)
GGGtrain <- vroom("train.csv")
GGGtest <- vroom("test.csv")
NAtrain <- vroom("GGGtrainNA.csv")
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(all_predictors(),
neighbors = 5,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
bake(NA_prep, new_data = NAtrain)
View(NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(all_predictors(),
neighbors = 10,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(all_predictors(),
neighbors = 5,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_bag(all_predictors(),
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length),
trees = 500)
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_bag(all_predictors(),
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length),
trees = 1000)
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_bag(all_predictors(),
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length),
trees = 500)
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_mean(all_numeric_predictors()) |>
step_impute_mode(all_nominal_predictors())
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_median(all_numeric_predictors()) |>
step_impute_mode(all_nominal_predictors())
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(all_predictors(),
neighbors = 5,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(all_predictors(),
neighbors = 20,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(all_predictors(),
neighbors = 30,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(all_predictors(),
neighbors = 100,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(all_predictors(),
neighbors = 50,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(all_predictors(),
neighbors = 40,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(all_predictors(),
neighbors = 30,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(all_predictors(),
neighbors = 45,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(all_predictors(),
neighbors = 46,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(all_predictors(),
neighbors = 47,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(all_predictors(),
neighbors = 46,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(all_predictors(),
neighbors = 15,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
NArecipe <- recipe(type ~ ., data = NAtrain) |>
step_impute_knn(all_predictors(),
neighbors = 10,
impute_with = imp_vars(bone_length,
rotting_flesh,
hair_length))
NA_prep <- prep(NArecipe)
NA_impute <- bake(NA_prep, new_data = NAtrain)
rmse_vec(GGGtrain[is.na(NAtrain)],
NA_impute[is.na(NAtrain)])
View(GGGtrain)
View(NAtrain)
is.na(NAtrain[color])
sum(is.na(NAtrain$color))
sum(is.na(NAtrain$has_soul))
sum(is.na(NAtrain$bone_length))
sum(is.na(NAtrain$rotting_flesh))
sum(is.na(NAtrain$hair_length))
sum(is.na(NAtrain$id))
sum(is.na(NAtrain$type))
# Run CV
CV_results <- rf_workflow |>
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy, roc_auc, f_meas,
sens, recall, precision))
# Find best tuning parameters
best_tune <- CV_results |>
select_best(metric = "f_meas")
# Finalize workflow and fit
final_workflow <- rf_workflow |>
finalize_workflow(best_tune) |>
fit(data = GGGtrain)
# Make predictions
rf_preds <- final_workflow |>
predict(new_data = GGGtest, type = "class")
library(tidymodels)
library(vroom)
library(embed)
GGGtrain <- vroom("train.csv")
GGGtest <- vroom("test.csv")
# Create recipe
GGGrecipe <- recipe(type ~ ., data = GGGtrain) |>
step_mutate_at(all_nominal_predictors(), fn = factor) |>
step_lencode_glm(all_nominal_predictors(), outcome = vars(type)) |>
step_normalize(all_numeric_predictors())
# Create random forest model
GGG_rf <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 500) |>
set_engine("ranger") |>
set_mode("classification")
# Create workflow
rf_workflow <- workflow() |>
add_model(GGG_rf) |>
add_recipe(GGGrecipe)
# Grid of values to tune over
tuning_grid <- grid_regular(mtry(range=c(1,6)),
min_n(),
levels = 5)
# Split data for CV
folds <- vfold_cv(GGGtrain, v = 10, repeats = 1)
# Run CV
CV_results <- rf_workflow |>
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy, roc_auc, f_meas,
sens, recall, precision))
# Find best tuning parameters
best_tune <- CV_results |>
select_best(metric = "f_meas")
# Finalize workflow and fit
final_workflow <- rf_workflow |>
finalize_workflow(best_tune) |>
fit(data = GGGtrain)
# Make predictions
rf_preds <- final_workflow |>
predict(new_data = GGGtest, type = "class")
# Prep for Kaggle submission
kaggle_sub <- rf_preds %>%
bind_cols(., GGGtest) |> # Bind predictions to test data
rename(type = .pred_class) |> # Rename .pred_1 to ACTION for Kaggle submission
select(id, type) # Keep id and ACTION variables
# Write out file
vroom_write(x = kaggle_sub, file = "./RFPreds.csv", delim = ",")
GGGtrain$id <- factor(GGGtrain$id)
# Create recipe
GGGrecipe <- recipe(type ~ ., data = GGGtrain) |>
step_mutate_at(all_nominal_predictors(), fn = factor) |>
step_lencode_glm(all_nominal_predictors(), outcome = vars(type)) |>
step_normalize(all_numeric_predictors())
# Create random forest model
GGG_rf <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 500) |>
set_engine("ranger") |>
set_mode("classification")
# Create workflow
rf_workflow <- workflow() |>
add_model(GGG_rf) |>
add_recipe(GGGrecipe)
# Grid of values to tune over
tuning_grid <- grid_regular(mtry(range=c(1,6)),
min_n(),
levels = 5)
# Split data for CV
folds <- vfold_cv(GGGtrain, v = 10, repeats = 1)
# Run CV
CV_results <- rf_workflow |>
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy, roc_auc, f_meas,
sens, recall, precision))
